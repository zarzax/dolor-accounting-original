<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>Dolor: /Users/mark/Documents/CLASS/#SVN/dolor/dolor/trunk/src/inc/set_of_books.cpp Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.5 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>/Users/mark/Documents/CLASS/#SVN/dolor/dolor/trunk/src/inc/set_of_books.cpp</h1><a href="set__of__books_8cpp.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* A simple set of book class.</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Author: Mark Young, John Kreuch</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">  * @ID:                                $Id: set_of_books.cpp 98 2008-05-08 17:30:31Z youn0624 $</span>
<a name="l00006"></a>00006 <span class="comment">  * @lastmodified       $Date: 2008-05-08 12:30:31 -0500 (Thu, 08 May 2008) $ </span>
<a name="l00007"></a>00007 <span class="comment">  * @modifiedby         $LastChangedBy: youn0624 $ </span>
<a name="l00008"></a>00008 <span class="comment">  * @version            $Revision: 98 $ </span>
<a name="l00009"></a>00009 <span class="comment"></span>
<a name="l00010"></a>00010 <span class="comment">*/</span>
<a name="l00011"></a>00011 
<a name="l00012"></a>00012 
<a name="l00013"></a>00013 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00014"></a>00014 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00015"></a>00015 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00016"></a>00016 <span class="preprocessor">#include &lt;iomanip&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#include "<a class="code" href="set__of__books_8h.html">set_of_books.h</a>"</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include "<a class="code" href="_accounts_8h.html">Accounts.h</a>"</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include "<a class="code" href="_category_8h.html">Category.h</a>"</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="comment">//package libraries to include</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include "lib/tinyxml/tinyxml.h"</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include "lib/strextra/Strextra.h"</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="keyword">using namespace </span>std;
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 
<a name="l00032"></a><a class="code" href="class_books.html#8724e6a8d13567fb1aa3bffb2f716fa5">00032</a> <a class="code" href="class_books.html#8724e6a8d13567fb1aa3bffb2f716fa5">Books::Books</a>()
<a name="l00033"></a>00033 {
<a name="l00034"></a>00034 }
<a name="l00035"></a>00035 
<a name="l00036"></a><a class="code" href="class_books.html#4cb65cd1484f1380f8c4911f63ae9612">00036</a> <a class="code" href="class_books.html#8724e6a8d13567fb1aa3bffb2f716fa5">Books::Books</a>(<span class="keywordtype">string</span> _name, <span class="keywordtype">string</span> _memo)
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038         <span class="comment">//Initialize the account object variables.</span>
<a name="l00039"></a>00039         <a class="code" href="class_books.html#ac8a7c202646331d6d5239adb5321fcd">name</a> = _name; <a class="code" href="class_books.html#534dec7d394864784094e415f8a39498">memo</a> = _memo;
<a name="l00040"></a>00040         
<a name="l00041"></a>00041         <span class="comment">//set balance to be zero.</span>
<a name="l00042"></a>00042         <a class="code" href="class_books.html#372d316be3ef8202ea672c269e4fd204">mainBalance</a> = <span class="stringliteral">"0.00"</span>;
<a name="l00043"></a>00043 
<a name="l00044"></a>00044         <span class="comment">//initialize the main category</span>
<a name="l00045"></a>00045         <a class="code" href="class_books.html#570e5f470aec2f38f3d89516f27bc5b9">categories</a> = <a class="code" href="class_category.html">Category</a> (<span class="stringliteral">"all"</span>, 0);
<a name="l00046"></a>00046         
<a name="l00047"></a>00047         <span class="comment">//set doc decloaration.</span>
<a name="l00048"></a>00048         TiXmlDeclaration * decl = <span class="keyword">new</span> TiXmlDeclaration( <span class="stringliteral">"1.0"</span>, <span class="stringliteral">""</span>, <span class="stringliteral">""</span> );
<a name="l00049"></a>00049         <a class="code" href="class_books.html#3746886caeccce2e4dbcc37dc430dbdd">BookXML</a>.LinkEndChild( decl );
<a name="l00050"></a>00050         
<a name="l00051"></a>00051         <span class="comment">//Initialize the XML Element AccountXML</span>
<a name="l00052"></a>00052         TiXmlElement * BookRoot = <span class="keyword">new</span> TiXmlElement( <span class="stringliteral">"setofbooks"</span> );
<a name="l00053"></a>00053         <a class="code" href="class_books.html#3746886caeccce2e4dbcc37dc430dbdd">BookXML</a>.LinkEndChild( BookRoot );
<a name="l00054"></a>00054         
<a name="l00055"></a>00055         <span class="comment">//Set XML data.</span>
<a name="l00056"></a>00056         <a class="code" href="class_books.html#1a3114c111c8db3ac4ed4414b3251fb1">setXML</a>();
<a name="l00057"></a>00057 }
<a name="l00058"></a>00058 
<a name="l00059"></a><a class="code" href="class_books.html#ae723e467a935bb19968fb0cb70f820e">00059</a> <a class="code" href="class_books.html#8724e6a8d13567fb1aa3bffb2f716fa5">Books::Books</a>(TiXmlElement * rootpass)
<a name="l00060"></a>00060 {
<a name="l00061"></a>00061         <span class="comment">//set doc decloaration.</span>
<a name="l00062"></a>00062         TiXmlDeclaration * decl = <span class="keyword">new</span> TiXmlDeclaration( <span class="stringliteral">"1.0"</span>, <span class="stringliteral">""</span>, <span class="stringliteral">""</span> );
<a name="l00063"></a>00063         <a class="code" href="class_books.html#3746886caeccce2e4dbcc37dc430dbdd">BookXML</a>.LinkEndChild( decl );
<a name="l00064"></a>00064         
<a name="l00065"></a>00065         TiXmlElement * root = <span class="keyword">new</span> TiXmlElement(* rootpass);
<a name="l00066"></a>00066         <a class="code" href="class_books.html#3746886caeccce2e4dbcc37dc430dbdd">BookXML</a>.LinkEndChild( root);    
<a name="l00067"></a>00067         
<a name="l00068"></a>00068         TiXmlNode* pElem = (*root).FirstChild( <span class="stringliteral">"name"</span> );        
<a name="l00069"></a>00069     <span class="keywordflow">for</span>( pElem; pElem; pElem=pElem-&gt;NextSiblingElement())
<a name="l00070"></a>00070     {  
<a name="l00071"></a>00071                 <span class="comment">//string pKey = to_string( pElem-&gt;Value() );</span>
<a name="l00072"></a>00072                 <span class="keyword">const</span> <span class="keywordtype">char</span> *pKey=pElem-&gt;Value();
<a name="l00073"></a>00073         
<a name="l00074"></a>00074                 <span class="keywordflow">if</span> ( pKey )
<a name="l00075"></a>00075                 {               
<a name="l00076"></a>00076                 <span class="comment">//show elements in userdata</span>
<a name="l00077"></a>00077                 <span class="keywordflow">if</span> ( to_string(pKey) == <span class="stringliteral">"name"</span> ) {
<a name="l00078"></a>00078                         <a class="code" href="class_books.html#ac8a7c202646331d6d5239adb5321fcd">name</a> = to_string( ((TiXmlElement*)pElem)-&gt;GetText() ) ;
<a name="l00079"></a>00079                         }
<a name="l00080"></a>00080                         
<a name="l00081"></a>00081                 <span class="keywordflow">if</span> ( to_string(pKey) == <span class="stringliteral">"memo"</span> ) {
<a name="l00082"></a>00082                         <a class="code" href="class_books.html#534dec7d394864784094e415f8a39498">memo</a> = to_string( ((TiXmlElement*)pElem)-&gt;GetText() ) ;
<a name="l00083"></a>00083                         }
<a name="l00084"></a>00084                 }       
<a name="l00085"></a>00085         }
<a name="l00086"></a>00086 }
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 <span class="comment">//makes a new account in the current set of books</span>
<a name="l00089"></a><a class="code" href="class_books.html#818e351215d2bd18a04c51e9857139a8">00089</a> <span class="keywordtype">void</span> <a class="code" href="class_books.html#818e351215d2bd18a04c51e9857139a8">Books::insertAccount</a>( <a class="code" href="class_accounts.html">Accounts</a> newAccount)
<a name="l00090"></a>00090 {       
<a name="l00091"></a>00091         ( <a class="code" href="class_books.html#3746886caeccce2e4dbcc37dc430dbdd">BookXML</a>.FirstChildElement( <span class="stringliteral">"setofbooks"</span> ) )-&gt;LinkEndChild( newAccount.<a class="code" href="class_accounts.html#949d11a108ae7b2b0bc0f5143f1f710d">getXML</a>() );
<a name="l00092"></a>00092 } 
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 <span class="comment">//makes a new account with the given info for the account</span>
<a name="l00095"></a><a class="code" href="class_books.html#cc074547d31b890ce887f302ff341500">00095</a> <span class="keywordtype">void</span> <a class="code" href="class_books.html#818e351215d2bd18a04c51e9857139a8">Books::insertAccount</a>(<span class="keywordtype">string</span> _name, <span class="keywordtype">string</span> _memo, <span class="keywordtype">string</span> _initialbalance)
<a name="l00096"></a>00096 {       
<a name="l00097"></a>00097         <a class="code" href="class_accounts.html">Accounts</a> newAccount(_name, _memo, _initialbalance);
<a name="l00098"></a>00098         
<a name="l00099"></a>00099         ( <a class="code" href="class_books.html#3746886caeccce2e4dbcc37dc430dbdd">BookXML</a>.FirstChildElement( <span class="stringliteral">"setofbooks"</span> ) )-&gt;LinkEndChild( newAccount.<a class="code" href="class_accounts.html#949d11a108ae7b2b0bc0f5143f1f710d">getXML</a>() );
<a name="l00100"></a>00100 } 
<a name="l00101"></a>00101 
<a name="l00102"></a>00102         
<a name="l00103"></a><a class="code" href="class_books.html#9e3b4d95409a02f4075fe64edab3a187">00103</a> <span class="keywordtype">void</span> <a class="code" href="class_books.html#9e3b4d95409a02f4075fe64edab3a187">Books::insertAccountByHand</a>( )
<a name="l00104"></a>00104 {
<a name="l00105"></a>00105         <span class="keywordtype">string</span> answer;
<a name="l00106"></a>00106         <span class="keywordtype">string</span> _initialbalance;
<a name="l00107"></a>00107         <span class="keywordtype">string</span> _name, _memo;
<a name="l00108"></a>00108         
<a name="l00109"></a>00109         cout &lt;&lt; <span class="stringliteral">"Would you like to create an account? (Y/ anykey for no): "</span>;
<a name="l00110"></a>00110         cin &gt;&gt; answer;
<a name="l00111"></a>00111         <span class="keywordflow">while</span>(answer == <span class="stringliteral">"Y"</span> || answer == <span class="stringliteral">"y"</span>)
<a name="l00112"></a>00112         {
<a name="l00113"></a>00113                 cout &lt;&lt; <span class="stringliteral">"Please enter a name (as string): "</span> ;
<a name="l00114"></a>00114                 cin &gt;&gt; _name;
<a name="l00115"></a>00115                 cout &lt;&lt; <span class="stringliteral">"Please enter a memo (as string): "</span> ;
<a name="l00116"></a>00116                 cin &gt;&gt; _memo;
<a name="l00117"></a>00117                 cout &lt;&lt; <span class="stringliteral">"Please enter an initial balance (as int): "</span> ;
<a name="l00118"></a>00118                 cin &gt;&gt; _initialbalance;
<a name="l00119"></a>00119         
<a name="l00120"></a>00120                 <a class="code" href="class_accounts.html">Accounts</a> newAccount(_name, _memo, _initialbalance);
<a name="l00121"></a>00121                 
<a name="l00122"></a>00122                 newAccount.<a class="code" href="class_accounts.html#16331b18b5ec6c4a92ce5cb6ca16b281">insertTransactionByHand</a>( <a class="code" href="class_books.html#570e5f470aec2f38f3d89516f27bc5b9">categories</a> );
<a name="l00123"></a>00123                 
<a name="l00124"></a>00124                 cout &lt;&lt; <span class="stringliteral">"merging account with books"</span> &lt;&lt; endl;
<a name="l00125"></a>00125                 
<a name="l00126"></a>00126                 ( <a class="code" href="class_books.html#3746886caeccce2e4dbcc37dc430dbdd">BookXML</a>.FirstChildElement( <span class="stringliteral">"setofbooks"</span> ) )-&gt;LinkEndChild( newAccount.<a class="code" href="class_accounts.html#949d11a108ae7b2b0bc0f5143f1f710d">getXML</a>() );
<a name="l00127"></a>00127                 
<a name="l00128"></a>00128                 cout &lt;&lt; <span class="stringliteral">"Would you like to create another account? (Y/ anykey for no): "</span>;
<a name="l00129"></a>00129                 cin &gt;&gt; answer;
<a name="l00130"></a>00130 
<a name="l00131"></a>00131         }
<a name="l00132"></a>00132 }       
<a name="l00133"></a>00133 
<a name="l00134"></a><a class="code" href="class_books.html#c9cd25967043f37ad06e5823f1d5436a">00134</a> <span class="keywordtype">void</span> <a class="code" href="class_books.html#c9cd25967043f37ad06e5823f1d5436a">Books::listAccounts</a>( )
<a name="l00135"></a>00135 {
<a name="l00136"></a>00136         cout &lt;&lt; <span class="stringliteral">"Set of Books stats\n"</span> &lt;&lt;
<a name="l00137"></a>00137                         <span class="stringliteral">"total balance $"</span> &lt;&lt; <a class="code" href="class_books.html#372d316be3ef8202ea672c269e4fd204">mainBalance</a> &lt;&lt; endl;
<a name="l00138"></a>00138 
<a name="l00139"></a>00139         cout &lt;&lt; <span class="stringliteral">"\n########################"</span> &lt;&lt; endl;
<a name="l00140"></a>00140         cout &lt;&lt; <span class="stringliteral">"Listing accounts...\n"</span> &lt;&lt; endl;
<a name="l00141"></a>00141         
<a name="l00142"></a>00142         <span class="keywordtype">int</span> counter = 0;
<a name="l00143"></a>00143         TiXmlHandle docHandle( &amp;<a class="code" href="class_books.html#3746886caeccce2e4dbcc37dc430dbdd">BookXML</a> );
<a name="l00144"></a>00144         TiXmlElement* child = docHandle.FirstChild( <span class="stringliteral">"setofbooks"</span> ).FirstChild( <span class="stringliteral">"account"</span> ).ToElement();
<a name="l00145"></a>00145         <span class="keywordflow">for</span>( child; child; child=child-&gt;NextSiblingElement() )
<a name="l00146"></a>00146         {
<a name="l00147"></a>00147                 counter++;
<a name="l00148"></a>00148                 TiXmlNode* pElem = (*child).FirstChild( <span class="stringliteral">"name"</span> );
<a name="l00149"></a>00149                 <span class="keywordtype">string</span> _account_name = to_string( ((TiXmlElement*)pElem)-&gt;GetText() );
<a name="l00150"></a>00150                 cout &lt;&lt; counter &lt;&lt; <span class="stringliteral">"  account_name: "</span> &lt;&lt; _account_name &lt;&lt; endl;
<a name="l00151"></a>00151         }
<a name="l00152"></a>00152 }
<a name="l00153"></a>00153 
<a name="l00154"></a><a class="code" href="class_books.html#44b146e9cdd330e862b698ef26e0a37e">00154</a> <span class="keywordtype">void</span> <a class="code" href="class_books.html#44b146e9cdd330e862b698ef26e0a37e">Books::showAccount</a>( )
<a name="l00155"></a>00155 {
<a name="l00156"></a>00156         <span class="keywordtype">string</span> answer, _name;
<a name="l00157"></a>00157         <a class="code" href="class_books.html#c9cd25967043f37ad06e5823f1d5436a">listAccounts</a>();
<a name="l00158"></a>00158         
<a name="l00159"></a>00159         cout &lt;&lt; <span class="stringliteral">"which account would you like to open? (account name / string) "</span> &lt;&lt; endl;
<a name="l00160"></a>00160         cin &gt;&gt; answer;
<a name="l00161"></a>00161         
<a name="l00162"></a>00162         answer = _name;
<a name="l00163"></a>00163 
<a name="l00164"></a>00164         cout &lt;&lt; <span class="stringliteral">"\n########################"</span> &lt;&lt; endl;
<a name="l00165"></a>00165         cout &lt;&lt; <span class="stringliteral">"Showing Account with name: "</span> &lt;&lt; _name &lt;&lt; endl &lt;&lt; endl;
<a name="l00166"></a>00166         
<a name="l00167"></a>00167         TiXmlHandle docHandle( &amp;<a class="code" href="class_books.html#3746886caeccce2e4dbcc37dc430dbdd">BookXML</a> );
<a name="l00168"></a>00168         TiXmlElement* child = docHandle.FirstChild( <span class="stringliteral">"setofbooks"</span> ).FirstChild( <span class="stringliteral">"account"</span> ).ToElement();
<a name="l00169"></a>00169         <span class="keywordflow">for</span>( child; child; child=child-&gt;NextSiblingElement() )
<a name="l00170"></a>00170         {
<a name="l00171"></a>00171                 TiXmlNode* pElem = (*child).FirstChild( <span class="stringliteral">"name"</span> );
<a name="l00172"></a>00172                 <span class="keywordtype">string</span> pElem_name = to_string( ((TiXmlElement*)pElem)-&gt;GetText() );
<a name="l00173"></a>00173                 cout &lt;&lt; <span class="stringliteral">"testing "</span> &lt;&lt; pElem_name &lt;&lt; endl;
<a name="l00174"></a>00174                 <span class="keywordflow">if</span> ( pElem_name .compare( _name ) )
<a name="l00175"></a>00175                 {
<a name="l00176"></a>00176                         cout &lt;&lt; <span class="stringliteral">"Found Account...  OPENING for Show... "</span> &lt;&lt; endl;
<a name="l00177"></a>00177                         <a class="code" href="class_accounts.html">Accounts</a> tmp(child);
<a name="l00178"></a>00178                         tmp.<a class="code" href="class_accounts.html#166611b8955a04de68f39df32fa91075">longShow</a>();
<a name="l00179"></a>00179                         <span class="keywordflow">return</span>;
<a name="l00180"></a>00180                 }
<a name="l00181"></a>00181         }       
<a name="l00182"></a>00182         cout &lt;&lt; <span class="stringliteral">"Unable to find account by that name... "</span> &lt;&lt; endl;
<a name="l00183"></a>00183 }
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 
<a name="l00186"></a><a class="code" href="class_books.html#dc9a7a84b7f8c3181b538f55e6f5be00">00186</a> <span class="keywordtype">void</span> <a class="code" href="class_books.html#dc9a7a84b7f8c3181b538f55e6f5be00">Books::openAccount</a>( <span class="keywordtype">string</span> _name )
<a name="l00187"></a>00187 {       
<a name="l00188"></a>00188         TiXmlHandle docHandle( &amp;<a class="code" href="class_books.html#3746886caeccce2e4dbcc37dc430dbdd">BookXML</a> );
<a name="l00189"></a>00189         TiXmlElement* child = docHandle.FirstChild( <span class="stringliteral">"setofbooks"</span> ).FirstChild( <span class="stringliteral">"account"</span> ).ToElement();
<a name="l00190"></a>00190         <span class="keywordflow">for</span>( child; child; child=child-&gt;NextSiblingElement() )
<a name="l00191"></a>00191         {
<a name="l00192"></a>00192                 TiXmlNode* pElem = (*child).FirstChild( <span class="stringliteral">"name"</span> );
<a name="l00193"></a>00193                 <span class="keywordtype">string</span> pElem_name = to_string( ((TiXmlElement*)pElem)-&gt;GetText() );
<a name="l00194"></a>00194                 <span class="keywordflow">if</span> ( pElem_name == _name )
<a name="l00195"></a>00195                 {
<a name="l00196"></a>00196                         cout &lt;&lt; <span class="stringliteral">"Found Account...  OPENING... "</span> &lt;&lt; endl;
<a name="l00197"></a>00197                         <a class="code" href="class_accounts.html">Accounts</a> tmp(child);
<a name="l00198"></a>00198                         tmp.<a class="code" href="class_accounts.html#d9c68fb49260d5d10d394f897ecea7d9">shortShow</a>();
<a name="l00199"></a>00199                         tmp.<a class="code" href="class_accounts.html#16331b18b5ec6c4a92ce5cb6ca16b281">insertTransactionByHand</a>( <a class="code" href="class_books.html#570e5f470aec2f38f3d89516f27bc5b9">categories</a> );
<a name="l00200"></a>00200                         <span class="keywordflow">return</span>;
<a name="l00201"></a>00201                 }
<a name="l00202"></a>00202         }       
<a name="l00203"></a>00203         cout &lt;&lt; <span class="stringliteral">"Unable to find account by that name... "</span> &lt;&lt; endl;
<a name="l00204"></a>00204 }
<a name="l00205"></a>00205 
<a name="l00206"></a><a class="code" href="class_books.html#6a74450e0e4285f3b885490d05308af2">00206</a> <span class="keywordtype">void</span> <a class="code" href="class_books.html#6a74450e0e4285f3b885490d05308af2">Books::read</a>( <span class="keywordtype">string</span> filename ) 
<a name="l00207"></a>00207 { 
<a name="l00208"></a>00208 
<a name="l00209"></a>00209         TiXmlDocument in( filename.c_str() );
<a name="l00210"></a>00210         <span class="comment">//load file, check for success.</span>
<a name="l00211"></a>00211         <span class="keywordflow">if</span> (in.LoadFile()) 
<a name="l00212"></a>00212         {
<a name="l00213"></a>00213                 cout &lt;&lt; <span class="stringliteral">"\nFile loaded successfully.. "</span> &lt;&lt; endl;
<a name="l00214"></a>00214         }
<a name="l00215"></a>00215         <span class="keywordflow">else</span> 
<a name="l00216"></a>00216         {
<a name="l00217"></a>00217                 cout &lt;&lt; <span class="stringliteral">"\nFailed to load file.."</span> &lt;&lt; endl;
<a name="l00218"></a>00218                 <span class="keywordflow">return</span>;
<a name="l00219"></a>00219         }
<a name="l00220"></a>00220         
<a name="l00221"></a>00221         <span class="comment">//find the root, check for success..</span>
<a name="l00222"></a>00222         TiXmlHandle docHandle( &amp;in );
<a name="l00223"></a>00223         TiXmlElement* root = docHandle.FirstChild( <span class="stringliteral">"setofbooks"</span> ).ToElement();
<a name="l00224"></a>00224         <span class="keywordflow">if</span> ( !root )
<a name="l00225"></a>00225         {
<a name="l00226"></a>00226                 cout &lt;&lt; <span class="stringliteral">"Root element not found."</span> &lt;&lt; endl;
<a name="l00227"></a>00227                 <span class="keywordflow">return</span>;
<a name="l00228"></a>00228         }       
<a name="l00229"></a>00229         
<a name="l00230"></a>00230         <span class="comment">//find the cattree and set the categories accordingly.</span>
<a name="l00231"></a>00231         TiXmlElement* categ = docHandle.FirstChild( <span class="stringliteral">"setofbooks"</span> ).FirstChild( <span class="stringliteral">"cattree"</span> ).ToElement();
<a name="l00232"></a>00232         <span class="keywordflow">if</span> ( categ )
<a name="l00233"></a>00233         {
<a name="l00234"></a>00234                 <a class="code" href="class_books.html#570e5f470aec2f38f3d89516f27bc5b9">categories</a> = <a class="code" href="class_category.html">Category</a> ( categ );
<a name="l00235"></a>00235         }<span class="keywordflow">else</span>
<a name="l00236"></a>00236         {
<a name="l00237"></a>00237                 cout &lt;&lt; <span class="stringliteral">"cattree not found in XML.  perhaps an old XML dataset"</span> &lt;&lt; endl;
<a name="l00238"></a>00238                 cout &lt;&lt; <span class="stringliteral">"UPDATING...."</span> &lt;&lt; endl;
<a name="l00239"></a>00239                 
<a name="l00240"></a>00240                 TiXmlElement * tCategory = <span class="keyword">new</span> TiXmlElement( <span class="stringliteral">"cattree"</span> );
<a name="l00241"></a>00241                 TiXmlNode* accnt = docHandle.FirstChild( <span class="stringliteral">"setofbooks"</span> ).FirstChild( <span class="stringliteral">"account"</span> ).ToNode();
<a name="l00242"></a>00242                 <span class="keywordflow">if</span>( (*root).InsertBeforeChild ( accnt, (*tCategory) ) )
<a name="l00243"></a>00243                 {
<a name="l00244"></a>00244                         cout &lt;&lt; <span class="stringliteral">"update failed.."</span> &lt;&lt; endl;
<a name="l00245"></a>00245                 }<span class="keywordflow">else</span>
<a name="l00246"></a>00246                 {
<a name="l00247"></a>00247                         cout &lt;&lt; <span class="stringliteral">"UPDATE SUCCESSFUL!"</span> &lt;&lt; endl;
<a name="l00248"></a>00248                 }
<a name="l00249"></a>00249                 
<a name="l00250"></a>00250         }
<a name="l00251"></a>00251         
<a name="l00252"></a>00252         
<a name="l00253"></a>00253         <span class="comment">//Set all the variables...</span>
<a name="l00254"></a>00254         <a class="code" href="class_books.html#3746886caeccce2e4dbcc37dc430dbdd">BookXML</a> = TiXmlDocument( in );  
<a name="l00255"></a>00255         <span class="comment">//create a tmp Books object to get the values for the variables.</span>
<a name="l00256"></a>00256         <a class="code" href="class_books.html">Books</a> tmp(root);
<a name="l00257"></a>00257         <a class="code" href="class_books.html#ac8a7c202646331d6d5239adb5321fcd">name</a> = tmp.<a class="code" href="class_books.html#ac8a7c202646331d6d5239adb5321fcd">name</a>;
<a name="l00258"></a>00258         <a class="code" href="class_books.html#534dec7d394864784094e415f8a39498">memo</a> = tmp.<a class="code" href="class_books.html#534dec7d394864784094e415f8a39498">memo</a>;
<a name="l00259"></a>00259 
<a name="l00260"></a>00260         
<a name="l00261"></a>00261 } 
<a name="l00262"></a>00262 
<a name="l00263"></a><a class="code" href="class_books.html#0e0d763bd0d9542bd62d03edbd1effd8">00263</a> <span class="keywordtype">void</span> <a class="code" href="class_books.html#0e0d763bd0d9542bd62d03edbd1effd8">Books::write</a>( <span class="keywordtype">string</span> filename )
<a name="l00264"></a>00264 {
<a name="l00265"></a>00265         <span class="keywordflow">if</span>( ! <a class="code" href="class_books.html#3746886caeccce2e4dbcc37dc430dbdd">BookXML</a>.SaveFile( filename.c_str() ) )
<a name="l00266"></a>00266         {
<a name="l00267"></a>00267                 cout &lt;&lt; <span class="stringliteral">"error writing set_of_books to file: "</span> &lt;&lt; filename &lt;&lt; endl;
<a name="l00268"></a>00268         }
<a name="l00269"></a>00269 } 
<a name="l00270"></a>00270 
<a name="l00271"></a><a class="code" href="class_books.html#1a3114c111c8db3ac4ed4414b3251fb1">00271</a> <span class="keywordtype">void</span> <a class="code" href="class_books.html#1a3114c111c8db3ac4ed4414b3251fb1">Books::setXML</a>( )
<a name="l00272"></a>00272 {
<a name="l00273"></a>00273         <span class="comment">/*  //Example XML</span>
<a name="l00274"></a>00274 <span class="comment">         *      &lt;setofbooks&gt;</span>
<a name="l00275"></a>00275 <span class="comment">         *      &lt;name&gt;&lt;/name&gt;</span>
<a name="l00276"></a>00276 <span class="comment">         *  &lt;cattree&gt;</span>
<a name="l00277"></a>00277 <span class="comment">         *     &lt;cat name="..." code="..."&gt;</span>
<a name="l00278"></a>00278 <span class="comment">         *        ...</span>
<a name="l00279"></a>00279 <span class="comment">         *     &lt;/cat&gt;</span>
<a name="l00280"></a>00280 <span class="comment">         *  &lt;/cattree&gt;</span>
<a name="l00281"></a>00281 <span class="comment">         *      &lt;memo&gt;&lt;/memo&gt;</span>
<a name="l00282"></a>00282 <span class="comment">         *      &lt;account&gt;</span>
<a name="l00283"></a>00283 <span class="comment">         *              ...</span>
<a name="l00284"></a>00284 <span class="comment">         *      &lt;/account&gt;</span>
<a name="l00285"></a>00285 <span class="comment">         *      &lt;setofbooks&gt;</span>
<a name="l00286"></a>00286 <span class="comment">         */</span>
<a name="l00287"></a>00287  
<a name="l00288"></a>00288         TiXmlHandle docHandle( &amp;<a class="code" href="class_books.html#3746886caeccce2e4dbcc37dc430dbdd">BookXML</a> );
<a name="l00289"></a>00289         TiXmlElement* root = docHandle.FirstChild( <span class="stringliteral">"setofbooks"</span> ).ToElement();
<a name="l00290"></a>00290         
<a name="l00291"></a>00291         <span class="comment">// &lt;name&gt;Marks Books&lt;/name&gt;</span>
<a name="l00292"></a>00292         TiXmlElement * tName = <span class="keyword">new</span> TiXmlElement( <span class="stringliteral">"name"</span> );
<a name="l00293"></a>00293         root-&gt;LinkEndChild( tName);
<a name="l00294"></a>00294         TiXmlText * txName = <span class="keyword">new</span> TiXmlText( <a class="code" href="class_books.html#ac8a7c202646331d6d5239adb5321fcd">name</a> );
<a name="l00295"></a>00295         tName-&gt;LinkEndChild( txName);
<a name="l00296"></a>00296         
<a name="l00297"></a>00297         <span class="comment">// &lt;memo&gt;All combined books&lt;/memo&gt;</span>
<a name="l00298"></a>00298         TiXmlElement * tMemo = <span class="keyword">new</span> TiXmlElement( <span class="stringliteral">"memo"</span> );
<a name="l00299"></a>00299         root-&gt;LinkEndChild( tMemo);
<a name="l00300"></a>00300         TiXmlText * txMemo = <span class="keyword">new</span> TiXmlText( <a class="code" href="class_books.html#534dec7d394864784094e415f8a39498">memo</a> );
<a name="l00301"></a>00301         tMemo-&gt;LinkEndChild( txMemo );
<a name="l00302"></a>00302         
<a name="l00303"></a>00303         <span class="comment">// &lt;cattree&gt; ... &lt;/cattree&gt;</span>
<a name="l00304"></a>00304         TiXmlElement * tCategory = <span class="keyword">new</span> TiXmlElement( <span class="stringliteral">"cattree"</span> );
<a name="l00305"></a>00305         root-&gt;LinkEndChild( tCategory );
<a name="l00306"></a>00306 } 
<a name="l00307"></a>00307 
<a name="l00308"></a>00308 
<a name="l00309"></a><a class="code" href="class_books.html#95b9a45f65c57340d6fb467706136d22">00309</a> <span class="keywordtype">void</span> <a class="code" href="class_books.html#95b9a45f65c57340d6fb467706136d22">Books::listCat</a>()
<a name="l00310"></a>00310 {
<a name="l00311"></a>00311         <a class="code" href="class_books.html#570e5f470aec2f38f3d89516f27bc5b9">categories</a>.<a class="code" href="class_category.html#f02e293a7a9d6ab534f68b87aa94d42d">listCategory</a>(0);
<a name="l00312"></a>00312 }
<a name="l00313"></a>00313 
<a name="l00314"></a><a class="code" href="class_books.html#76b5f22a8cdb8f505682bb979a81fdfa">00314</a> <span class="keywordtype">void</span> <a class="code" href="class_books.html#76b5f22a8cdb8f505682bb979a81fdfa">Books::addSubCat</a>(<a class="code" href="class_category.html">Category</a> parent, <a class="code" href="class_category.html">Category</a> child)
<a name="l00315"></a>00315 {
<a name="l00316"></a>00316         <a class="code" href="class_books.html#570e5f470aec2f38f3d89516f27bc5b9">categories</a>.<a class="code" href="class_category.html#7daeb9ff355352d8d26a3ca418edf2a3">addSubCategory</a>(parent, child);
<a name="l00317"></a>00317 }
<a name="l00318"></a>00318 
<a name="l00319"></a>00319 
<a name="l00320"></a><a class="code" href="class_books.html#ec4c262880c63250c7d11d4a97962085">00320</a> TiXmlElement* <a class="code" href="class_books.html#ec4c262880c63250c7d11d4a97962085">Books::getXML</a>()
<a name="l00321"></a>00321 {
<a name="l00322"></a>00322         TiXmlHandle docHandle( &amp;<a class="code" href="class_books.html#3746886caeccce2e4dbcc37dc430dbdd">BookXML</a> );
<a name="l00323"></a>00323         TiXmlElement* root = docHandle.FirstChild( <span class="stringliteral">"setofbooks"</span> ).ToElement();
<a name="l00324"></a>00324         <span class="keywordflow">if</span> (root)
<a name="l00325"></a>00325         {
<a name="l00326"></a>00326                 <span class="keywordflow">return</span> root;
<a name="l00327"></a>00327         }<span class="keywordflow">else</span>
<a name="l00328"></a>00328         {
<a name="l00329"></a>00329                 cout &lt;&lt; <span class="stringliteral">"root element not found in Books::getXML() on line:"</span> &lt;&lt; __LINE__ &lt;&lt; endl;
<a name="l00330"></a>00330                 <span class="keywordflow">return</span> NULL;
<a name="l00331"></a>00331         }
<a name="l00332"></a>00332                 
<a name="l00333"></a>00333 }
<a name="l00334"></a>00334 
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Fri May 9 13:48:58 2008 for Dolor by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.5 </small></address>
</body>
</html>
